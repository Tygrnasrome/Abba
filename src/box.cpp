#include <iostream>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <math.h>
#include <glm/glm.hpp>
#include <glm/ext.hpp>
#include "box.h"
#include "attribarray.h"

/*	tento první konstruktor (prázdné závorky) pouze vytvoří
 *	krychli o straně 1 polohu a škálování se musí dodělat dodatečně		*/
Box::Box()
{

	GLfloat vertex_array[] =
	{
		// position	color		UV		normal		tangent		bitangent
		// Top face
		1, 1, -1,	0, 1, 0,	1, 1,		0, 1, 0,	1, 0, 0,	0, 0, -1,
		-1, 1, -1,	0, 1, 0,	0, 1,		0, 1, 0,	1, 0, 0,	0, 0, -1,
		-1, 1,  1,	0, 1, 0,	0, 0,		0, 1, 0,	1, 0, 0,	0, 0, -1,
		1, 1,  1,	0, 1, 0,	1, 0,		0, 1, 0,	1, 0, 0,	0, 0, -1,

		// Bottom face
		-1, -1, -1,	1, .5, 0,	0, 0,		0, -1, 0,	1, 0, 0,	0, 0, 1,
		1, -1, -1,	1, .5, 0,	1, 0,		0, -1, 0,	1, 0, 0,	0, 0, 1,
		1, -1,  1,	1, .5, 0,	1, 1,		0, -1, 0,	1, 0, 0,	0, 0, 1,
		-1, -1,  1,	1, .5, 0,	0, 1,		0, -1, 0,	1, 0, 0,	0, 0, 1,

		// Front face
		-1,  1,  1,	1, 1, 0,	0, 1,		0, 0, 1,	1, 0, 0,	0, 1, 0,
		-1, -1,  1,	1, 1, 0,	0, 0,		0, 0, 1,	1, 0, 0,	0, 1, 0,
		1, -1,  1,	1, 1, 0,	1, 0,		0, 0, 1,	1, 0, 0,	0, 1, 0,
		1,  1,  1,	1, 1, 0,	1, 1,		0, 0, 1,	1, 0, 0,	0, 1, 0,

		// Back face
		-1, -1, -1,	1, 0, 0,	1, 0,		0, 0, -1,	-1, 0, 0,	0, 1, 0,
		-1,  1, -1,	1, 0, 0,	1, 1,		0, 0, -1,	-1, 0, 0,	0, 1, 0,
		1,  1, -1,	1, 0, 0,	0, 1,		0, 0, -1,	-1, 0, 0,	0, 1, 0,
		1, -1, -1,	1, 0, 0,	0, 0,		0, 0, -1,	-1, 0, 0,	0, 1, 0,

		// Left face
		-1,  1, -1,	0, 0, 1,	0, 1,		-1, 0, 0,	0, 0, 1,	0, 1, 0,
		-1, -1, -1,	0, 0, 1,	0, 0,		-1, 0, 0,	0, 0, 1,	0, 1, 0,
		-1, -1,  1,	0, 0, 1,	1, 0,		-1, 0, 0,	0, 0, 1,	0, 1, 0,
		-1,  1,  1,	0, 0, 1,	1, 1,		-1, 0, 0,	0, 0, 1,	0, 1, 0,

		// Right face
		1, -1, -1,	1, 0, 1,	1, 0,		1, 0, 0,	0, 0, -1,	0, 1, 0,
		1,  1, -1,	1, 0, 1,	1, 1,		1, 0, 0,	0, 0, -1,	0, 1, 0,
		1,  1,  1,	1, 0, 1,	0, 1,		1, 0, 0,	0, 0, -1,	0, 1, 0,
		1, -1,  1,	1, 0, 1,	0, 0,		1, 0, 0,	0, 0, -1,	0, 1, 0,

	};

	vao.vertexBuffer(vertex_array, sizeof(vertex_array), {3, 3, 2, 3, 3, 3});
	GLuint index_array[] =
	{
		0, 1, 2,  0, 2, 3,
		4, 5, 6,  4, 6, 7,
		8, 9, 10, 8, 10,11,
		12,13,14, 12,14,15,
		16,17,18, 16,18,19,
		20,21,22, 20,22,23,
	};

	vao.indexBuffer(index_array, sizeof(index_array), GL_TRIANGLES);
}

/*	tento druhý konstruktor přijímá dva body kvádru (nebo krychle)
 * 	podle těchto bodů poté vypočítá polohu a škáluje kvádr (nebo krychli)	*/
Box::Box(float x1, float y1, float z1, float x2, float y2, float z2)
{
	GLfloat vertex_array[] =
	{
		// position     color       UV		normála
		// Top face - Green
		-1, 1,  1,      0, 1, 0,    0, 0,	0,1,0,
		-1, 1, -1,      0, 1, 0,    0, 1,	0,1,0,
		 1, 1, -1,      0, 1, 0,    1, 1,	0,1,0,
		 1, 1,  1,      0, 1, 0,    1, 0,	0,1,0,


		//bottom face
		-1,-1,  1,	0, 1, 0,	0, 0,	0,-1,0,
		-1,-1, -1,	0, 1, 0,	0, 1,	0,-1,0,
		1, -1, -1,	0, 1, 0,	1, 1,	0,-1,0,
		1, -1,  1,	0, 1, 0,	1, 0,	0,-1,0,

		//left face
		-1, -1, 1,	0, 1, 0,	1, 0,	-1,0,0,
		-1,-1,-1,	0, 1, 0,	0, 0,	-1,0,0,
		-1, 1, -1,	0, 1, 0,	0, 1,	-1,0,0,
		-1, 1, 1,	0, 1, 0,	1, 1,	-1,0,0,
		//right face
		1, -1, 1,	0, 1, 0,	1, 0,	1,0,0,
		1,-1,-1,	0, 1, 0,	0, 0,	1,0,0,
		1, 1, -1,	0, 1, 0,	0, 1,	1,0,0,
		1, 1, 1,	0, 1, 0,	1, 1,	1,0,0,

		//front face
		-1,1,-1,	0, 1, 0,	0, 0,	0,0,-1,
		-1,-1,-1,	0, 1, 0,	0, 1,	0,0,-1,
		1,-1,-1,	0, 1, 0,	1, 1,	0,0,-1,
		1,1,-1,		0, 1, 0,	1, 0,	0,0,-1,

		//back face
		-1,1,1,		0, 1, 0,	0, 0,	0,0,1,
		-1,-1,1,	0, 1, 0,	0, 1,	0,0,1,
		1,-1,1,		0, 1, 0,	1, 1,	0,0,1,
		1,1,1,		0, 1, 0,	1, 0,	0,0,1,
	};

	vao.vertexBuffer(vertex_array, sizeof(vertex_array), {3, 3, 2, 3});

	GLuint index_array[] =
	{
		0, 1, 2,  0, 2, 3,
		4, 5, 6,  4, 6, 7,
		8, 9, 10, 8, 10,11,
		12,13,14, 12,14,15,
		16,17,18, 16,18,19,
		20,21,22, 20,22,23,
	};
	vao.indexBuffer(index_array, sizeof(index_array), GL_TRIANGLES);
}
